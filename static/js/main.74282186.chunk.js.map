{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","notes","setNotes","noteSelected","setNoteSelected","a","console","log","fetch","headers","response","json","updateModifyDate","note","copyOfStateObj","Object","assign","updatedDate","indexToReplace","findIndex","noteFromState","_id","copyOfStateArray","handleInput","e","type","toLowerCase","title","target","value","content","creationDate","updates","method","body","JSON","stringify","oldNotes","splice","newNote","useEffect","fetchNotes","className","color","height","width","cssClasses","onClick","map","id","defaultValue","onKeyPress","handleSave","removeNote","Date","toLocaleString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74282186.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { AddCircle, CloseCircle, Save, ArrowForward, Create } from 'react-ionicons'\n\nfunction App() {\n    const [notes, setNotes] = useState([]);\n    const [noteSelected, setNoteSelected] = useState('');\n\n    useEffect(() => {\n        fetchNotes();\n    }, []);\n\n    async function fetchNotes() {\n        console.log(\"Fetching notes...\");\n        const response = await fetch('http://localhost:3001/api/v1/notes', { \n            headers: {\n                'Accept': 'application/json'\n            }\n        });\n        const json = await response.json();\n\n        console.log(json);  \n        setNotes(json);\n    }\n\n    function updateModifyDate(note) {\n        let copyOfStateObj = {};\n        copyOfStateObj = Object.assign(copyOfStateObj, note);\n        copyOfStateObj.updatedDate = note.updatedDate\n        \n        let indexToReplace = notes.findIndex((noteFromState) => \n            noteFromState._id === copyOfStateObj._id\n        );\n\n        const copyOfStateArray = [...notes];\n        copyOfStateArray[indexToReplace] = copyOfStateObj\n\n        setNotes(copyOfStateArray);\n    }\n\n    function handleInput(e, note, type) {\n        let copyOfStateObj = {};\n        copyOfStateObj = Object.assign(copyOfStateObj, note);\n\n        if(type.toLowerCase() === 'title')\n            copyOfStateObj.title = e.target.value;\n        else if(type.toLowerCase() === 'content') {\n            copyOfStateObj.content = e.target.value;\n        }\n        \n        let indexToReplace = notes.findIndex((noteFromState) => \n            noteFromState._id === copyOfStateObj._id\n        );\n\n        const copyOfStateArray = [...notes];\n        copyOfStateArray[indexToReplace] = copyOfStateObj\n\n        setNotes(copyOfStateArray);\n    }\n\n    async function handleSave(note) {\n        if(note._id !== noteSelected) return;\n\n        let { _id, updatedDate, creationDate, ...updates } = note;\n        console.log(note);\n        console.log(updates);\n\n        const response = await fetch('http://localhost:3001/api/v1/notes/'+note._id, { \n            method: 'PATCH',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(updates)\n        });\n        const json = await response.json();\n        updateModifyDate(json);\n        console.log('Saved note ' + JSON.stringify(json, null, 4));\n    }\n\n    async function removeNote(note) {\n        if(note._id !== noteSelected) return;\n\n        await fetch('http://localhost:3001/api/v1/notes/'+note._id, { \n            method: 'DELETE'\n        });\n        let indexToReplace = notes.findIndex((noteFromState) => \n            noteFromState._id === note._id\n        );\n\n        let oldNotes = [...notes];\n        oldNotes.splice(indexToReplace, 1);\n        console.log(oldNotes);\n\n        setNotes(oldNotes);\n\n        console.log('Removed note ' + note._id);\n    }\n\n    async function addNote() {\n        let newNote = {\n            title: \"Title\",\n            content: \"Content\"\n        }\n        const response = await fetch('http://localhost:3001/api/v1/notes', { \n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(newNote)\n        });\n        const json = await response.json();\n\n        newNote = json;\n        setNotes(oldNotes => [newNote, ...oldNotes]);\n        setNoteSelected(newNote._id);\n    }\n\n    return (\n        <div className=\"App\">\n            <h1 className=\"title\">Note Taker 1.0</h1>\n            <div className=\"button-area\">\n                <AddCircle\n                    color={'rgb(253, 253, 253);'} \n                    title=\"add a note\"\n                    height=\"45px\"\n                    width=\"45px\"\n                    cssClasses=\"add\"\n                    onClick={addNote}\n                />\n            </div>\n            <ul className=\"notes-list\">\n                {notes.map(note => (\n                    <li \n                    key={note._id} \n                    id={note._id} \n                    className={note._id === noteSelected ? \"note note-selected no-pointer\" : \"note\"}>\n                        <div className=\"note-main\">\n                            <div className=\"note-top\">\n                                <input \n                                className=\"note-title\" \n                                type=\"text\" \n                                defaultValue={note.title}\n                                onKeyPress={ e => { handleInput(e, note, 'title') }}\n                                />\n                                <Save\n                                color={'#00000'}\n                                height=\"25px\"\n                                width=\"25px\"\n                                title=\"Save\"\n                                cssClasses=\"save\"\n                                onClick={() => { handleSave(note) }}\n                                />\n                                <CloseCircle\n                                color={'#00000'}\n                                height=\"25px\"\n                                width=\"25px\"\n                                title=\"Delete\"\n                                cssClasses=\"delete\" \n                                onClick={() => {removeNote(note)}}\n                                />\n                                <ArrowForward\n                                color={'#00000'} \n                                height=\"25px\"\n                                width=\"25px\"\n                                title=\"Back\"\n                                cssClasses=\"back\"\n                                onClick={ () => {setNoteSelected(\"\")} }\n                                />\n                            </div>\n                            <textarea \n                            className=\"note-content\" \n                            defaultValue={note.content}\n                            onKeyPress={ e => { handleInput(e, note, 'content') }}\n                            />\n                        </div>\n                        <div className=\"note-footer\">\n                            <p className=\"note-created\">\n                                Created {new Date(note.creationDate).toLocaleString()}\n                            </p>\n                            <p className=\"note-updated\">\n                                Last modified {new Date(note.updatedDate).toLocaleString()}\n                            </p>\n                            <Create\n                            color={'#00000'} \n                            height=\"35px\"\n                            width=\"35px\"\n                            title=\"Edit\"\n                            cssClasses=\"edit\"\n                            onClick={ () => {setNoteSelected(note._id)} }\n                            />\n                        </div>\n                    </li> \n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}